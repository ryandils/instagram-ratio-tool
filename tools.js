// Do not edit this file.
// Simply copy and paste it into your web console.

let username;

const INSTAGRAM_URL = "https://www.instagram.com";

const fetchOptions = {
    credentials: "include",
    headers: {
      "X-IG-App-ID": "936619743392459",
    },
    method: "GET",
  };

  async function execute(fn, ...args) {
    if (window.location.origin !== INSTAGRAM_URL) {
      window.alert(
        "Hey! You need to be on the instagram site before you run the code. I'm taking you there now but you're going to have to run the code into the console again."
      );
      window.location.href = "https://www.instagram.com";
      console.clear();
      return;
    }

    if (!args[0] || args[0] === "example_username") {
      args[0] = window.prompt(
          "What's your Instagram username?"
      );
    }

    document.write("<br/><p color='green;font-weight: bolder;'>Look at the console to see the output. Refreshing this tab will also make everything go back to normal.</p>")
    return await fn(...args);
  }

  const sleep = (ms) => new Promise((r) => setTimeout(r, ms));
  const random = (min, max) => Math.ceil(Math.random() * (max - min)) + min;

  const concatFriendshipsApiResponse = async (
    list,
    user_id,
    count,
    next_max_id = ""
  ) => {
    let url = `https://www.instagram.com/api/v1/friendships/${user_id}/${list}/?count=${count}`;
    if (next_max_id) {
      url += `&max_id=${next_max_id}`;
    }

    const data = await fetch(url, fetchOptions).then((r) => r.json());

    if (data.next_max_id) {
      const timeToSleep = random(100, 500);
      console.log(
        `Loaded ${data.users.length} ${list}. Sleeping ${timeToSleep}ms to avoid rate limiting`
      );

      await sleep(timeToSleep);

      return data.users.concat(
        await concatFriendshipsApiResponse(list, user_id, count, data.next_max_id)
      );
    }

    return data.users;
  };

  const getFollowers = (user_id, count = 50, next_max_id = "") => {
    return concatFriendshipsApiResponse("followers", user_id, count, next_max_id);
  };

  const getFollowing = (user_id, count = 50, next_max_id = "") => {
    return concatFriendshipsApiResponse("following", user_id, count, next_max_id);
  };

  const getUserId = async (username) => {
    user = username;
    const lowerCaseUsername = user.toLowerCase();
    const url = `https://www.instagram.com/api/v1/web/search/topsearch/?context=blended&query=${lowerCaseUsername}&include_reel=false`;
    const data = await fetch(url, fetchOptions).then((r) => r.json());

    const result = data.users?.find(
      (result) => result.user.username.toLowerCase() === lowerCaseUsername
    );

    return result?.user?.pk || null;
  };

  const getUserFriendshipStats = async (username) => {
    if (username === "example_username") {
      username = window.prompt(
        "Hey, it looks like you forgot to change the username variable. No worries, we'll update it right now. What's your username?"
      );
    }

    const user_id = await getUserId(username);

    if (!user_id) {
      throw new Error(`Could not find user with username ${username}`);
    }

    const followers = await getFollowers(user_id);
    const following = await getFollowing(user_id);

    const followersUsernames = followers.map((follower) =>
      follower.username.toLowerCase()
    );
    const followingUsernames = following.map((followed) =>
      followed.username.toLowerCase()
    );

    const followerSet = new Set(followersUsernames);
    const followingSet = new Set(followingUsernames);

    console.log(Array(28).fill("-").join(""));
    console.log(
      `Fetched`,
      followerSet.size,
      "followers and ",
      followingSet.size,
      " following."
    );

    console.log(
      `If this doesn't seem right then some of the output might be inaccurate`
    );

    const PeopleIDontFollowBack = Array.from(followerSet).filter(
      (follower) => !followingSet.has(follower)
    );

    const PeopleNotFollowingMeBack = Array.from(followingSet).filter(
      (following) => !followerSet.has(following)
    );

    downloadToFile(PeopleNotFollowingMeBack.join('\n'), 'people_not_following_me_back.txt', 'text/plain');

    function downloadToFile(content, filename, contentType) {
      const file = new Blob([content], { type: contentType });
      const fileURL = URL.createObjectURL(file);
      const tempLink = document.createElement('a');

      tempLink.href = fileURL;
      tempLink.download = filename;
      document.body.appendChild(tempLink);
      tempLink.click();

      document.body.removeChild(tempLink);
      URL.revokeObjectURL(fileURL);
    }

    return {
      PeopleIDontFollowBack,
      PeopleNotFollowingMeBack,
    };
  };

  unfollowApiRoute = '%s/web/friendships/%s/unfollow/'

  execute(getUserFriendshipStats, username).then(console.log);